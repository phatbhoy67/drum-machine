{"version":3,"sources":["assets/wav/Electronic-Tom-1.wav","assets/wav/Alesis-S4-Plus-FatSynSlap-C2.wav","assets/wav/Bass-Drum-1.wav","assets/wav/Casio-VZ-10M-Fretless-Bass-C2.wav","assets/wav/Cowbell-1.wav","assets/wav/Korg-N1R-High-Q.wav","assets/wav/Korg-N1R-Open-Surdo.wav","assets/wav/Korg-N1R-Pedal-Hi-Hat.wav","assets/wav/Korg-N1R-Vibraslap.wav","assets/wav/WaveFiles.js","DrumpadList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","WaveFiles","LowTom","BassSlap","BassDrum","BassSynth","Cowbell","HighQ","OpenSurdo","PedalHiHat","VibraSlap","DrumpadList","buttonText","audioDescription","audioTrack","keycode","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","displayText","handleKeyPress","bind","assertThisInitialized","handleClick","document","addEventListener","removeEventListener","event","sound","target","children","setState","id","currentTime","play","_this2","keyUpper","key","toUpperCase","which","audio","getElementsByTagName","drumpadList","forEach","drumpad","i","_this3","drumpads","map","react_default","a","createElement","className","onClick","src","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8fa0f9e5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Electronic-Tom-1.f34eaf34.wav\";","module.exports = __webpack_public_path__ + \"static/media/Alesis-S4-Plus-FatSynSlap-C2.346af258.wav\";","module.exports = __webpack_public_path__ + \"static/media/Bass-Drum-1.40f42a70.wav\";","module.exports = __webpack_public_path__ + \"static/media/Casio-VZ-10M-Fretless-Bass-C2.8f9aca6c.wav\";","module.exports = __webpack_public_path__ + \"static/media/Cowbell-1.4121f204.wav\";","module.exports = __webpack_public_path__ + \"static/media/Korg-N1R-High-Q.03181901.wav\";","module.exports = __webpack_public_path__ + \"static/media/Korg-N1R-Open-Surdo.afc103f4.wav\";","module.exports = __webpack_public_path__ + \"static/media/Korg-N1R-Pedal-Hi-Hat.b59ebe0f.wav\";","module.exports = __webpack_public_path__ + \"static/media/Korg-N1R-Vibraslap.14f55b7c.wav\";","// gather the .wav files\nimport LowTom from \"./Electronic-Tom-1.wav\";\nimport BassSlap from \"./Alesis-S4-Plus-FatSynSlap-C2.wav\";\nimport BassDrum from \"./Bass-Drum-1.wav\";\nimport BassSynth from \"./Casio-VZ-10M-Fretless-Bass-C2.wav\";\nimport Cowbell from \"./Cowbell-1.wav\";\nimport HighQ from \"./Korg-N1R-High-Q.wav\";\nimport OpenSurdo from \"./Korg-N1R-Open-Surdo.wav\";\nimport PedalHiHat from \"./Korg-N1R-Pedal-Hi-Hat.wav\";\nimport VibraSlap from \"./Korg-N1R-Vibraslap.wav\";\n\nconst WaveFiles = {\n  LowTom,\n  BassSlap,\n  BassDrum,\n  BassSynth,\n  Cowbell,\n  HighQ,\n  OpenSurdo,\n  PedalHiHat,\n  VibraSlap\n};\nexport default WaveFiles;\n","import WaveFiles from \"./assets/wav/WaveFiles\";\nconst DrumpadList = [\n  {\n    buttonText: \"Q\",\n    audioDescription: \"LowTom\",\n    audioTrack: WaveFiles.LowTom,\n    keycode: 81\n  },\n  {\n    buttonText: \"W\",\n    audioDescription: \"BassSlap\",\n    audioTrack: WaveFiles.BassSlap,\n    keycode: 87\n  },\n  {\n    buttonText: \"E\",\n    audioDescription: \"BassDrum\",\n    audioTrack: WaveFiles.BassDrum,\n    keycode: 69\n  },\n  {\n    buttonText: \"A\",\n    audioDescription: \"BassSynth\",\n    audioTrack: WaveFiles.BassSynth,\n    keycode: 65\n  },\n  {\n    buttonText: \"S\",\n    audioDescription: \"Cowbell\",\n    audioTrack: WaveFiles.Cowbell,\n    keycode: 83\n  },\n  {\n    buttonText: \"D\",\n    audioDescription: \"HighQ\",\n    audioTrack: WaveFiles.HighQ,\n    keycode: 68\n  },\n  {\n    buttonText: \"Z\",\n    audioDescription: \"OpenSurdo\",\n    audioTrack: WaveFiles.OpenSurdo,\n    keycode: 90\n  },\n  {\n    buttonText: \"X\",\n    audioDescription: \"PedalHiHat\",\n    audioTrack: WaveFiles.PedalHiHat,\n    keycode: 88\n  },\n  {\n    buttonText: \"C\",\n    audioDescription: \"VibraSlap\",\n    audioTrack: WaveFiles.VibraSlap,\n    keycode: 67\n  }\n];\n\nexport default DrumpadList;\n","import React, { Component } from \"react\";\nimport drumpadList from \"./DrumpadList\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { displayText: \"\" };\n\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleKeyPress);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleKeyPress);\n  }\n\n  handleClick(event) {\n    // console.log(event.target.id)\n    const sound = event.target.children[0];\n    this.setState({ displayText: event.target.id });\n    sound.currentTime = 0;\n    sound.play();\n  }\n\n  handleKeyPress(event) {\n    // console.log(event.which);\n    const keyUpper = event.key.toUpperCase();\n    const key = event.which;\n    const audio = document.getElementsByTagName(\"audio\");\n    drumpadList.forEach((drumpad, i) => {\n      if (drumpad.keycode === key || drumpad.buttonText === keyUpper) {\n        this.setState({ displayText: drumpad.audioDescription });\n        audio[i].currentTime = 0;\n        audio[i].play();\n      }\n    });\n  }\n  render() {\n    const drumpads = drumpadList.map(drumpad => (\n      <button\n        id={drumpad.audioDescription}\n        className=\"drum-pad\"\n        key={drumpad.audioDescription}\n        // src={drumpad.audioTrack}\n        onClick={this.handleClick}\n      >\n        {drumpad.buttonText.toUpperCase()}\n        <audio\n          id={drumpad.buttonText}\n          src={drumpad.audioTrack}\n          className=\"clip\"\n        />\n      </button>\n    ));\n    return (\n      <div id=\"drum-machine\" className=\"drum-machine\">\n        <h1>DrumMachine</h1>\n        <h2 id=\"display\">\n          {!this.state.displayText ? \"Sound\" : this.state.displayText}\n        </h2>\n        <div>{drumpads}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App id=\"app\"/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}